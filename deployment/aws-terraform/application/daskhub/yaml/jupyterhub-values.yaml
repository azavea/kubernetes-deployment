proxy:
  service:
    type: LoadBalancer
  https:
    enabled: true

hub:
  config:
    GenericOAuthenticator:
      login_service: "AWS Cognito"
      username_key: "email"
      userdata_method: "POST"
    JupyterHub:
      authenticator_class: oauthenticator.generic.GenericOAuthenticator
  nodeSelector:
    node-type: core
  image:
    pullPolicy: Always
  services:
    dask-gateway:
      url: http://traefik-dask-gateway
  extraConfig:
    # Register Dask Gateway service and setup singleuser environment.
    10-add-dask-gateway-values: |
      # Set Dask Gateway default addresses in the singleuser environment.
      import os
      # These are set by jupyterhub.
      c.KubeSpawner.environment.setdefault(
        "DASK_GATEWAY__ADDRESS",
        "http://traefik-dask-gateway/services/dask-gateway"
      )
      c.KubeSpawner.environment.setdefault(
        "DASK_GATEWAY__PROXY_ADDRESS",
        "gateway://traefik-dask-gateway:80"
      )
      c.KubeSpawner.environment.setdefault(
        "DASK_GATEWAY__PUBLIC_ADDRESS",
        "/services/dask-gateway/"
      )
      c.KubeSpawner.environment.setdefault("DASK_GATEWAY__AUTH__TYPE", "jupyterhub")
      c.KubeSpawner.start_timeout = 300

      # Adds Dask Gateway as a JupyterHub service to make the gateway available at
      # {HUB_URL}/services/dask-gateway
      service_url = "http://traefik-dask-gateway"
      for service in c.JupyterHub.services:
          if service["name"] == "dask-gateway":
              if not service.get("url", None):
                  print("Adding dask-gateway service URL")
                  service.setdefault("url", service_url)
              break
      else:
          print("dask-gateway service not found. Did you set jupyterhub.hub.services.dask-gateway.apiToken?")

cull:
  enabled: true
  timeout: 900

singleuser:
  startTimeout: 300
  defaultUrl: "/lab"  # Use jupyterlab by default.
  storage:
    type: none
    extraVolumeMounts:
      - mountPath: "/scratch"
        name: scratch-volume
    extraVolumes:
      - name: scratch-volume
        ephemeral:
          volumeClaimTemplate:
            metadata:
              labels:
                type: jupyter-singleuser-scratch
            spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: gp2
              volumeMode: Filesystem
              resources:
                requests:
                  storage: 128Gi
  memory:
    guarantee: 16G
  nodeSelector:
    node-type: worker
  extraEnv:
    PGUSER:
      valueFrom:
        secretKeyRef:
          name: rds-credentials
          key: username
          optional: true
    PGPASSWORD:
      valueFrom:
        secretKeyRef:
          name: rds-credentials
          key: password
          optional: true
    PGHOST:
      valueFrom:
        secretKeyRef:
          name: rds-credentials
          key: host
          optional: true
